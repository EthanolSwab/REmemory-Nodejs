import { pool } from "../../../config/dbConfig.js";
import { BaseError } from "../../../config/error.js";
import { status } from "../../../config/responseStatus.js";

import {
	checkCapsuleNum_d,
	updateOpenedStatus_d,
	checkUpdatedRows,
	getUserEmail,
} from "./rcapsuleDao.js";

export const createCapsuleNum_r = async (nickname) => {
	const connection = await pool.getConnection(async (conn) => conn);
	let capsule_number;

	while (true) {
		const random_number = Math.floor(Math.random() * 100000 + 1); // 1~100000 ÏÇ¨Ïù¥Ïùò ÎûúÎç§ Ïà´Ïûê
		capsule_number = `${nickname}_${random_number}`;

		const isExistCapsule = await checkCapsuleNum_d(connection, capsule_number);
		if (!isExistCapsule) {
			break;
		}
	}

	connection.release();
	return capsule_number;
};

// Ï∫°Ïäê ÏÉÅÌÉúÎ≥ÄÍ≤Ω
export const updateOpenedStatus_r = async () => {
	await updateOpenedStatus_d();
};

// (status ACTIVE Ïãú) ÏïåÎ¶ºÎ©îÏùº Î∞úÏÜ°
// clientÏóêÏÑú Îî∞Î°ú http ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇº ÌïÑÏöîÍ∞Ä ÏóÜÏúºÎØÄÎ°ú controller ÎåÄÏã† providerÏóêÏÑú Íµ¨ÌòÑÌï®..
export const sendNotificationEmail = async () => {
	try {
		const oneDayAgo = new Date();
		oneDayAgo.setDate(oneDayAgo.getDate() - 1);

		const connection = await pool.getConnection(async (conn) => conn);

		const updatedRows = await checkUpdatedRows(connection, oneDayAgo);

		for (const row of updatedRows) {
			const userEmail = await getUserEmail(connection, row.capsule_number);

			// Î©îÏùº Î≥¥ÎÇ¥Í∏∞
			const info = await transporter.sendMail(
				{
					from: `"Re-Memory" <${process.env.REMEMORY_EMAIL}>`,
					to: `${userEmail}`,
					subject: "ÏûëÏÑ±ÌïòÏã† ÌÉÄÏûÑÏ∫°ÏäêÏù¥ Ïó¥Î†∏Ïñ¥Ïöî! üíå",
					text: `ÌÉÄÏûÑÏ∫°Ïäê ${row.rcapsule_name}Ïù¥ Ïó¥Î†∏ÏäµÎãàÎã§.
                ÏßÄÍ∏à Î¶¨Î©îÎ™®Î¶¨ ÌéòÏù¥ÏßÄÏóê Î∞©Î¨∏ÌïòÏó¨ Ï∫°ÏäêÏùÑ ÌôïÏù∏Ìï¥ Î≥¥ÏÑ∏Ïöî ‚ú®
                Ï†ÄÌù¨ 'Re-Memory'Ïùò ÏÑúÎπÑÏä§Î•º Ïù¥Ïö©Ìï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§.

                ÌÉÄÏûÑÏ∫°ÏäêÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÎäî Ï∫°Ïäê Í≥†Ïú†Î≤àÌò∏, ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î©îÏùº ÌïòÎã®Ïóê Ï≤®Î∂ÄÌïòÏòÄÏäµÎãàÎã§.
                
                ‚úî Ï∫°Ïäê Î≤àÌò∏: ${row.capsule_number},
                ‚úî Ï∫°Ïäê ÎπÑÎ∞ÄÎ≤àÌò∏: ${row.rcapsule_password}`,
				},
				(err, info) => {
					if (err) {
						console.error(`Failed to send email to ${userEmail}:`, error);
					} else {
						console.log(
							`Email sent to ${userEmail}. Message ID: ${info.messageId}`,
						);
					}
				},
			);

			console.log("Ïù¥Î©îÏùº Ï†ÑÏÜ° ÏÑ±Í≥µ : ", userEmail);
		}
	} catch (error) {
		console.error(error);
	}
};
